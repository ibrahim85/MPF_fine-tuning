'''
data generator generates the binary data based on the available weights of
the network which need to be finetuned.

One main goal of this class is to generate more data samples in order to
get rid of the float outputs of the neural network.

For example, if we have classifier output of 0.7, we may generate 100 different samples
based on p = 0.7. By sampling, we can transfer the float output to binary data samples by
adding more data samples. But then the subsequently training would be much easier.
'''

from sklearn import preprocessing
import numpy as np
from utils_mpf import load, save


class data_generator(object):

    def __init__(self, data_dict, n_samples):
        '''
        :param nets: nets is the network which needs to be finetuned, it always contains the weights and bias term
        :param data_dict: is of the form { 'layer #': layer output file path}
        :param n_samples: the number of samples generated by sampling
        '''

        # if self.W is None:
        #     self.W = nets.W
        #     self.bias = nets.bias

        if self.data_dict is None:
            self.data_dict = data_dict

        self.n_samples = n_samples

    def data_binarize(self, mnist = True):
        '''

        :param mnist: whether we are using mnist datasets.
        if we are using mnist, we are starting from the first layer of the whole network, and the first layer
        need to be binarized, while the other layers need to be sampled.

        :return: data_full_layer is one instantiation of the binary outputs of all the neurons
        '''


        binarizer = preprocessing.Binarizer(threshold=0.5)
        data_layer_1 =  binarizer.transform(load(self.data_dict['layer_1']))


        data_full_layer = None
        list_keys = list(self.data_dict.keys())

        for k,v in self.data_dict.items():
            if k == list_keys[0]:
                data_full_layer = data_layer_1
            elif k != list_keys[-1]:
                activation =  binarizer.transform(load(v))
                data_full_layer = np.concatenate((data_full_layer,activation), axis = 1)
            else:
                activation = np.random.binomial(1,load(v))
                data_full_layer = np.concatenate((data_full_layer,activation), axis = 1)

        return data_full_layer

    def data_generator(self,mnist = True):

        '''
        :param minst: whether the data set is mnist
        :return: n_sample instantiations of the binary outputs for all neurons
        '''
        data_samples = None

        for i in range(self.n_samples):
            if data_samples is None:
                    data_samples = self.data_binarize(mnist= mnist)
            else:
                    data_samples = np.concatenate((data_samples,self.data_binarize(mnist = mnist)),axis = 0)

        data_path = 'binary_data_samples.pkl'
        save(data_path,data_samples)

        return data_path












