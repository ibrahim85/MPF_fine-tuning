'''
Non-data generator generates the 1-bit flip non-data samples based on the data

'''
from sklearn import preprocessing
import numpy as np

class non_data_generator(object):

    def __init__(self, data_samples, n_untis, connect_function = '1-bit-flip'):
        '''
        :param data_samples: the binary data samples generated by the
        :param n_untis: the number of nodes in the neural network
        :param connect_function: the way of generating non_data samples
            1-bit-flip: flip 1 bit of all the data samples
            random_bit_flip: randomly flip 1 bit of the samples
            factorize: factorize MPF
            continuous: continuous MPF
            persistent: persistent MPF
        :return:
        '''

        self.data_samples = data_samples
        self.connect_function = connect_function
        self.n_units = n_untis

    def one_bit_flip(self):

        '''
        Perform 1-bit-flip for every data sample
        :return: non-data samples of 1 hamming distance away from the data samples
        '''

        X = np.load(self.data_samples)

        Tile_X = np.tile(X,(X.shape[1], 1))  # tile the input data samples

        Y = np.repeat(np.eye(X.shape[1]),X.shape[0]) # construct a binary matrix for bit flip

        non_data_samples = (Tile_X + Y)%2

        return non_data_samples

    def random_bit_flip(self, percent = 0.5):

        '''
        :param percent: randomly choose part of the 1-bit flip samples as non-data samples
        :return: percent of the 1-bit-flip non-data samples
        '''

        X = np.load(self.data_samples)

        Tile_X = np.tile(X,(X.shape[1], 1))  # tile the input data samples

        Y = np.repeat(np.eye(X.shape[1]),X.shape[0]) # construct a binary matrix for bit flip

        non_data_samples = (Tile_X + Y)%2

        return non_data_samples[np.random.choice(X.shape[0],size = int(X.shape[0]*percent), replace=False),:]


